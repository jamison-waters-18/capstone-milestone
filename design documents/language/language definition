sequence:
	expr;sequence
	expr;

expr:
	bool_expr
	int_expr
	str_expr
	null_func

command:

bool_expr:
	bool_val
	bool_func

bool_val:
	0
	1

int_expr:
	int_val
	int_func

int_val:
	integer pointer

str_expr:
	str_val
	str_func

str_val
	string pointer

null_func:							//return nothing
	halt()
	nop()
	assign_int(str_expr,int_expr)
	set_arbitrary_counter(str_expr,int_expr)
	enter_arbitrary_state(str_expr,sequence)		//adds expr1 as plain text to list of arbitrary states, with expr2 being what happens upon exit
	exit_arbitrary_state(str_expr)		//removes expr if found in plain text in list of arbitrary states
	buff_ac(int_expr)
	nerf_ac(int_expr)
	buff_hp_max(int_expr)
	nerf_hp_max(int_expr)
	set_temp_hp(int_expr)
	add_process(menu_const,str_expr,sequence)
	update_unarmed_strike(str_expr)									//updated unarmed strike qualities should be featured in separate xml sheet
	add_action(str_expr,str_expr,bool_expr,sequence)				//new action should be featured in separate xml sheet
	add_bonus_action(str_expr,str_expr,bool_expr,sequence)			//new action should be featured in separate xml sheet
	add_reaction(str_expr,str_expr,bool_expr,sequence)				//new action should be featured in separate xml sheet
	add_free_action(str_expr,str_expr,bool_expr,sequence)			//new action should be featured in separate xml sheet
	add_at_will(str_expr,str_expr,bool_expr,sequence)				//new action should be featured in separate xml sheet
	if(bool_expr,sequence,sequence)
	set_spell_concentration(bool_expr)
	reenable_action(str_expr)
	provide_spell_list(str_expr)
	add_spell(str_expr,str_expr)		//add's spell with private name expr1 to spell list with private name expr2
	remove_action(str_expr)
	remove_reaction(str_expr)
	remove_bonus_action(str_expr)
	remove_free_action(str_expr)
	remove_at_will(str_expr)
	place_note(menu_const,str_expr,str_expr)
	add_damage(damage_type,int_expr,int_expr) //damage type, value, die
	add_resistance(damage_type...)
	remove_resistance(damage_type...)

prompt_func:
	prompt_damage_type(var_str_expr)
	prompt_select_file(str_expr,str_expr,int_expr,bool_expr)	//prompt_select_file("features",3,sequence) searches folder "features" for files, filters out selections based on bool_expr
	


bool_func:							//return bool_val
	bool_attr
	eq(int_expr,int_expr)				//returns expr1 == expr2
	gt(int_expr,int_expr)				//returns expr1 > expr2
	and(bool_expr...)					//returns expr1 && expr2 &&...
	or(bool_expr...)					//returns expr1 || expr2 ||...
	not(bool_expr)						//returns !expr
	has_any_flags(int_expr,int_expr)	//returns (expr1 & expr2) != 0
	has_all_flags(int_expr,int_expr)	//returns (expr1 & expr2) == expr2)
	name_contains(str_expr,str_expr)	//returns true if expr2 is a substring of expr1

int_func:							//return int_val
	int_attr
	int_const
	min(int_expr,int_expr)				//returns pointer to the lowest
	max(int_expr,int_expr)				//returns pointer to the highest
	add(int_expr,int_expr)				//returns pointer to the sum
	sub(int_expr,int_expr)				//returns pointer to the difference OR zero, if difference is negative
	mult(int_expr,int_expr)				//returns pointer to the product
	div_round_down(int_expr,int_expr)	//returns pointer to expr1/expr2
	div_round_up(int_expr,int_expr)		//returns pointer to (expr1+expr2-1)/expr2
	prompt_select_damage(int_expr)
	combine_flags(flags)

str_func:
	str_attr

bool_attr:
	spell_ritual()
	char_can_verbal()
	char_can_somatic()
	char_can_materials(str_expr)
	has_arbitrary_state(str_expr)		//returns if expr is found in list of arbitrary states
	can_learn_spell(str_expr)			//returns true if you have a spell slot of at least that spell level, 
	can_cast_spell(str_expr)			//

int_attr:
	val_of_arbitrary_counter(str_expr)
	char_level()
	char_class_level(str_expr)
	char_inv_count(str_expr, int_expr)	//expr2 is minimum value
	char_valuable_count()				//
	char_ability_score(ability_const)
	char_ability_mod(ability_const)
	spell_level()
	spell_casting_time()
	spell_num_targets()
	weapon_flags()
	

str_attr:
	spell_private_name()
	spell_public_name()
	spell_school()

int_const:
	ability_const
	time_const
	range_const
	shape_const
	menu_const
	damage_type_const
	flag

ability_const:
	str()
	dex()
	con()
	int()
	wis()
	cha()

time_const:
	action()
	bonus_action()
	free_action()
	at_will()
	reaction()
	num_minutes(int_expr)

range_const:
	self()
	touch()
	num_feet(int_expr)

menu_const:
	menu_weapon_attack()
	menu_weapon_damage()
	menu_spell_cast()
	menu_spell_damage()
	menu_long_rest()
	menu_short_rest()
	menu_equip()
	menu_ability_check()
	menu_ability_save()
	menu_skill_check()
	menu_initiative()
	menu_apply_effect()
	menu_default()
	menu_action()

processes_const:
	pre_weapon_attack()
	when_weapon_attack_roll_options()
	pre_weapon_damage()
	when_weapon_damage_roll_options()
	when_taking_damage()
	when_downed()
	after_short_rest()
	after_long_rest()
	before_combat()
	before_turn()
	after_turn()
	after_taking_status_effect()

damage_type:
	acid()

flag:
	weapon_flag_melee()
	weapon_flag_...

description of blob
	current character
	selected damage type
	selected spell
	selected spell slot
	selected weapon
	selected ability
	the turn stack
